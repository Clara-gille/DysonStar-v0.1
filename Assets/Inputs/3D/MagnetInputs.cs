//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputs/3D/MagnetInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MagnetInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MagnetInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MagnetInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8963c00d-6554-414b-a1ba-4a584929b52d"",
            ""actions"": [
                {
                    ""name"": ""ShootBlue"",
                    ""type"": ""Button"",
                    ""id"": ""3c4adac1-8857-428e-9120-8c4adc38dba1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootRed"",
                    ""type"": ""Button"",
                    ""id"": ""23ed0d16-abfb-48d2-8e8d-3a05dd456ec9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8560ce3a-4a70-4358-aece-2962b573da2d"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootBlue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ed8f57c7-f231-4c6a-8d53-b8842d8e7312"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootRed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ShootBlue = m_Player.FindAction("ShootBlue", throwIfNotFound: true);
        m_Player_ShootRed = m_Player.FindAction("ShootRed", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_ShootBlue;
    private readonly InputAction m_Player_ShootRed;
    public struct PlayerActions
    {
        private @MagnetInputs m_Wrapper;
        public PlayerActions(@MagnetInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @ShootBlue => m_Wrapper.m_Player_ShootBlue;
        public InputAction @ShootRed => m_Wrapper.m_Player_ShootRed;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @ShootBlue.started += instance.OnShootBlue;
            @ShootBlue.performed += instance.OnShootBlue;
            @ShootBlue.canceled += instance.OnShootBlue;
            @ShootRed.started += instance.OnShootRed;
            @ShootRed.performed += instance.OnShootRed;
            @ShootRed.canceled += instance.OnShootRed;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @ShootBlue.started -= instance.OnShootBlue;
            @ShootBlue.performed -= instance.OnShootBlue;
            @ShootBlue.canceled -= instance.OnShootBlue;
            @ShootRed.started -= instance.OnShootRed;
            @ShootRed.performed -= instance.OnShootRed;
            @ShootRed.canceled -= instance.OnShootRed;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnShootBlue(InputAction.CallbackContext context);
        void OnShootRed(InputAction.CallbackContext context);
    }
}
